<?php

namespace Hsy\Options\Tests;


use Hsy\Options\Exceptions\FieldNotExists;
use Hsy\Options\Exceptions\GroupKeyNotDefined;
use Hsy\Options\Facades\Options;
use Hsy\Options\Models\Option;
use Illuminate\Support\Facades\Config;

class OptionGroupsTest extends TestCase
{
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        config()->set("options.groups", $this->optionGroups);
    }

    private $optionGroups = [
        'group-one' => [
            'title' => 'title of group one',
            'fields' => [
                [
                    'key' => 'field-one',
                    'title' => 'field title one',
                    'type' => 'text',
                ],
                [
                    'key' => 'field-two',
                    'title' => 'field-title-two',
                    'type' => 'text',
                    'description' => 'Some descriptions',
                ],
            ]
        ],
        'group-two' => [
            'title' => 'title of group one',
            'fields' => [
                [
                    'key' => 'field-one',
                    'title' => 'field title one',
                    'type' => 'text',
                ],
            ]
        ],
    ];

    public function test_if_key_not_defined_in_config()
    {
        $this->expectException(GroupKeyNotDefined::class);
        Options::group("noDefinedKey");
    }

    public function test_create_instance()
    {
        Options::group("group-one");
        $this->addToAssertionCount(1);
    }

    public function test_default_value_of_undefined_option()
    {
        $option = Options::group("group-one")->get("newKey", "default value");
        $this->assertEquals($option, "default value");
    }

    public function test_field_not_exists_in_config_on_set_method()
    {
        $value = "value";
        $group = "group-one";
        $field = "field-undefined";

        $this->expectException(FieldNotExists::class);

        Options::group($group)->set($field, $value);

    }


    public function test_set()
    {
        $table = "options";

        $group = "group-one";
        $field = "field-one";

        //check set new value
        $value = "value";
        Options::group($group)->set($field, $value);
        $this->assertDatabaseCount($table, 1);
        $this->assertEquals($value, Options::group($group)->get($field));


        //check update option
        $value = "new value";
        Options::group($group)->set($field, $value);
        $this->assertDatabaseCount($table, 1);
        $this->assertEquals($value, Options::group($group)->get($field));


        //------------------------------

        $group = "group-one";
        $field = "field-two";

        //check set new value
        $value = "field_two_value";
        Options::group($group)->set($field, $value);
        $this->assertDatabaseCount($table, 1);
        $this->assertEquals($value, Options::group($group)->get($field));


        //---------------------------

        $group = "group-two";
        $field = "field-one";

        //check set new value
        $value = "field_one_value_group_two";
        Options::group($group)->set($field, $value);
        $this->assertDatabaseCount($table, 2);
        $this->assertEquals($value, Options::group($group)->get($field));


        //check update value
        $value = "new_value_field_one_value_group_two";
        Options::group($group)->set($field, $value);
        $this->assertEquals($value, Options::group($group)->get($field));

    }
}